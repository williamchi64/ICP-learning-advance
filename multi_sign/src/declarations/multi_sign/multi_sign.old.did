type definite_canister_settings = 
 record {
   compute_allocation: nat;
   controllers: vec principal;
   freezing_threshold: nat;
   memory_allocation: nat;
 };
type Trie = 
 variant {
   branch: Branch;
   "empty";
   leaf: Leaf;
 };
type Set = 
 variant {
   branch: Branch;
   "empty";
   leaf: Leaf;
 };
type ProposalTypes = 
 opt record {
       ProposalType;
       List;
     };
type ProposalTypeUpdate = 
 variant {
   create: CreateParam;
   delete;
   install: InstallParam;
   start;
   stop;
 };
type ProposalType = 
 variant {
   create;
   delete;
   install;
   start;
   stop;
 };
type ProposalOutputUpdate = 
 record {
   agree_proportion: record {
                       denominator: nat;
                       numerator: nat;
                     };
   agree_voters: List_1;
   proposal_type: ProposalTypeUpdate;
   total_agree_num: nat;
   total_voter_num: nat;
   total_voters: List_1;
   voter_threshold: nat;
 };
type ProposalOutput = 
 record {
   agree_proportion: float64;
   proposal_type: ProposalType;
   total_voter_agree: nat;
   total_voter_num: nat;
   voter_agree: List_1;
   voter_threshold: nat;
   voter_total: List_1;
 };
type List__1 = 
 opt record {
       ProposalOutputUpdate;
       List_3;
     };
type List_4 = 
 opt record {
       CanisterId;
       List_4;
     };
type List_3 = 
 opt record {
       ProposalOutputUpdate;
       List_3;
     };
type List_2 = 
 opt record {
       record {
         Key;
         null;
       };
       List_2;
     };
type List_1 = 
 opt record {
       principal;
       List_1;
     };
type List = 
 opt record {
       ProposalType;
       List;
     };
type Leaf = 
 record {
   keyvals: AssocList;
   size: nat;
 };
type Key = 
 record {
   hash: Hash;
   key: principal;
 };
type InstallParam = 
 record {
   mode: InstallMode;
   wasm_code: blob;
   wasm_code_sha256: vec nat8;
 };
type InstallMode = 
 variant {
   install;
   reinstall;
   upgrade;
 };
type Hash = nat32;
type Deque = 
 record {
   List__1;
   List__1;
 };
type CreateParam = record {cycles: nat;};
type CanisterStatus = 
 record {
   cycles: nat;
   freezing_threshold: nat;
   memory_size: nat;
   module_hash: opt vec nat8;
   settings: definite_canister_settings;
   status: variant {
             running;
             stopped;
             stopping;
           };
 };
type CanisterOuputUpdate = 
 record {
   id: CanisterId;
   lock:
    variant {
      lock: record {
              delete: bool;
              install: bool;
              start: bool;
              stop: bool;
            };
      unlock;
    };
   proposals: Deque;
 };
type CanisterId = principal;
type Branch = 
 record {
   left: Trie;
   right: Trie;
   size: nat;
 };
type AssocList = 
 opt record {
       record {
         Key;
         null;
       };
       List_2;
     };
service : {
  canister_status: (nat) -> (CanisterStatus);
  create_canister: (opt nat) -> (bool);
  delete_canister: (nat) -> (bool);
  get_canisters: () -> (List_4) query;
  get_canisters_update: () -> (vec CanisterOuputUpdate) query;
  get_controllers: () -> (Set) query;
  get_cycles: () -> (nat) query;
  get_proposals: () -> (vec record {
                              CanisterId;
                              ProposalOutput;
                            }) query;
  get_waiting_processes: () -> (vec record {
                                      CanisterId;
                                      ProposalTypes;
                                    }) query;
  install_code: (nat, blob, InstallMode) -> (bool);
  post_proposal: (opt nat, ProposalType, opt nat, opt float64) -> (bool);
  register: (opt principal) -> (principal);
  start_canister: (nat) -> (bool);
  stop_canister: (nat) -> (bool);
  unregister: (opt principal) -> (principal);
  vote_proposal: (opt nat, bool, opt principal) -> (bool);
}
